===================
  Power Production
===================

This module calculates the net electricity generated by the plant and quantities such as the recirculating power fraction and engineering gain.

Model for zero-D tokamaks
=========================

The power plant turns the heat generated in the core into electricity.
The primary heat is the sum of the heat which is

- injected into the plasma externally (auxilliary heating),
- deposited in the plasma by the alpha particles, and
- generated in the blanket when neutrons impinge on it.

Expressed as an equation,

.. math::
   P_\mathrm{primary} = P_\mathrm{aux} + P_α + P_\mathrm{bl}

An additional quantity of heat must also be removed: the heat generated by inefficiencies in the coolant pumping process itself. Thus the total to be removed is

.. math::
   P_\mathrm{heat} = P_\mathrm{primary} + P_\mathrm{coolant}.

The gross power generated is

.. math::
   P_\mathrm{gen} = η_\mathrm{th} \, P_\mathrm{heat}

where :math:`η_\mathrm{th}` is the thermodynamic efficiency of the thermal-to-electric conversion.

Fusion plants typically have a significant quantity of 'recirculating electric power' required to drive the plant subsystems, such as the auxilliary heating, the coolant pumping, plasma control systems, and cryogenic cooling systems:

.. math:: P_\mathrm{recirc} = P_\mathrm{aux} +
                              P_\mathrm{cryo} +
                              P_\mathrm{pumps} +
                              P_\mathrm{control}.

The pumping power is

.. math:: P_\mathrm{pumps} = c \, P_\mathrm{primary}

where :math:`c` is a small constant. Likewise the plasma control system power is modeled as

.. math:: P_\mathrm{control} = c \, P_\mathrm{primary}.

Net plant performance
---------------------
The net power produced is

.. math:: P_\mathrm{net} = P_\mathrm{gen} - P_\mathrm{recirc}.

Two metrics often used to describe the overall performance are the "engineering gain" :math:`Q_\mathrm{eng}` and the recirculating power fraction. These are defined as

.. math::
        Q_\mathrm{eng} &= P_\mathrm{gen} / P_\mathrm{recirc}

        f_\mathrm{recirc} &= Q_\mathrm{eng}^{-1}.

Implementation
==============

:class:`.Powerplant` is the top-level class. It requires a nonlinear solver to be attached. This is due to how the component :class:`.TotalThermalPower` is constructed: :math:`P_\mathrm{pumps}` is an input but it depends on :math:`P_\mathrm{primary}`, an output. In the future the component could be split in two in order to have a purely forward computational flow.

:class:`.Powerplant` contains as subcomponents

- :class:`.AuxilliaryPower`
- :class:`.SimpleCoolantPumpingPower`
- :class:`.SimplePlasmaControlPower`
- :class:`.RecirculatingElectricPower`
- :class:`.TotalThermalPower`
- :class:`.SimpleGeneratedPower`
- and :class:`.PowerplantQ`.

.. currentmodule:: faroes.powerplant

.. autoclass:: Powerplant

.. autoclass:: faroes.coolantpumping.SimpleCoolantPumpingPower

.. autoclass:: faroes.plasmacontrolsystem.SimplePlasmaControlPower

.. autoclass:: RecirculatingElectricPower

.. autoclass:: TotalThermalPower

.. autoclass:: SimpleGeneratedPower

.. autoclass:: PowerplantQ

See also
--------
- :doc:`auxheating`
- :doc:`costing`
